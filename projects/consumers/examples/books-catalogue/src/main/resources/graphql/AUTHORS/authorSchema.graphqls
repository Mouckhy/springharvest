extend type Query {
    # Query to get a list of authors based on the search input
    authors(input: AuthorSearchInput = {name: "", page: 0, size: 20, sortOrder: "name", sortDirection: "D"}): [Author]
    # Query to find an author by the book ID
    findAuthorByBookID(id: ID!, bookFilter: AuthorFilter) : Author!
    # Query to get an author by their ID
    authorById(id: ID!): Author
}

extend type Mutation {
    # Mutation to update an author's information
    authorMutation(id: ID!, input: authorMutationInput!) : Author
}

# The Author type represents an author in the system
type Author implements BaseEntity{
    id: ID! # The unique ID of the author
    name: String! # The name of the author
    traceData: TraceData # Trace data for the author
}

# The AuthorSearchInput is used to filter the authors query
input AuthorSearchInput{
    name: String # The name of the author to search for
    page: Int # The page number for pagination
    size: Int # The number of authors to return per page
    sortOrder: String # The field to sort the authors by
    sortDirection: String # The direction to sort the authors in
}

# The AuthorFilter is used to filter authors by various conditions
input AuthorFilter{
    name: StringExpression # The name condition to filter authors by
    not: AuthorFilter # The conditions to exclude authors by
}

# The authorMutationInput is used to update an author's information
input authorMutationInput {
    name: String! # The new name of the author
    updatedBy: ID! # The ID of the user updating the author
}